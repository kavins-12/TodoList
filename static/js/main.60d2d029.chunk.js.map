{"version":3,"sources":["components/TodoITEMS.js","components/Todos.js","components/pages/About.js","components/layout/Header.js","components/layout/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoITEMS","getStyle","backgroundColor","padding","border","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","deleteItem","deleteStyle","Component","background","color","borderRadius","float","cursor","Todos","todos","map","key","About","Fragment","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","e","setState","target","value","submitReq","preventDefault","addTodo","onSubmit","display","placeholder","name","flex","className","App","Axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60d2d029.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoITEMS extends Component{\r\n    getStyle= ()=>{\r\n      return {\r\n        backgroundColor: '#f4f4f4',\r\n        padding: '10px',\r\n        border : '1px #ccc dotted',\r\n        textDecoration :this.props.todo.completed? 'line-through' : 'none'\r\n      }\r\n    }\r\n  \r\n  render(){\r\n    const {id , title} = this.props.todo;\r\n        return(\r\n            <div style={this.getStyle()}>\r\n            <p>\r\n              <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/> {' '}\r\n              { title }\r\n              <button onClick={this.props.deleteItem.bind(this,id)} style={deleteStyle}>X</button>\r\n              </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTodoITEMS.propTypes={\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    deleteItem: PropTypes.func.isRequired\r\n  }\r\n\r\nconst deleteStyle={\r\n  background: 'red',\r\n  color: '#fff',\r\n  borderRadius: '50%',\r\n  padding: '5px 10px',\r\n  border: 'none',\r\n  float: 'right',\r\n  cursor: 'pointer'\r\n  \r\n}\r\n\r\nexport default TodoITEMS;","import React,{Component} from 'react';\r\nimport TodoITEMS from './TodoITEMS';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component{\r\n  render(){\r\n    \r\n    return this.props.todos.map((todo)=>(\r\n      <TodoITEMS key={todo.id} todo={ todo } markComplete={this.props.markComplete} deleteItem={this.props.deleteItem}/>\r\n    ));\r\n  }\r\n}\r\n\r\n\r\nTodos.propTypes={\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  deleteItem: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react'\r\n\r\n  function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is my first react app.You can add your work here and it's unforgattable untill you click delete button.</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst headerStyle={\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nfunction Header(){\r\n    return(\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\" > About</Link>\r\n        </header>\r\n    )\r\n    \r\n}\r\n\r\nconst linkStyle={\r\n    color: \"#fff\",\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header;","\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n    state={\r\n        title:''\r\n    }\r\n\r\n    onChange =(e) =>{\r\n        this.setState({title:e.target.value});\r\n    }\r\n\r\n    submitReq=(e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title:''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitReq} style={{ display: 'flex'}}>\r\n                <input type='text' placeholder=\" Add your works here!\" name='title' style={{ flex:'10',padding:'5px'}} value={this.state.title} onChange={this.onChange}/>\r\n                <input type='submit' value='submit' className='btn' style={{flex : '1'}} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodo.propTypes={\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","import React,{Component} from 'react';\nimport Todos from './components/Todos';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport About from './components/pages/About';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/layout/AddTodo';\nimport Axios from 'axios';\n\n\nclass App extends Component {\n\n  state ={\n    todos:[]\n  }\n\n  componentDidMount(){\n    Axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=5\").then(res => this.setState({todos:res.data}))\n  }\n\nmarkComplete = (id)=>{\n  this.setState({\n    todos : this.state.todos.map(todos=>{\n      if(todos.id===id){\n      todos.completed=!todos.completed\n      }\n      return todos;\n    })\n  }\n  );\n}\n\ndeleteItem = (id)=>{\n  \n  Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(res => this.setState({\n    todos :[...this.state.todos.filter(todos => todos.id !== id)]\n  }))\n  \n}\n\naddTodo=(title)=>{\n  Axios.post(`https://jsonplaceholder.typicode.com/todos`,{\n    title: title,\n    completed: false\n  }).then(res => this.setState({todos:[...this.state.todos,res.data]}))\n\n}\n\nrender(){\n      \n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header/>\n            <Route exact path=\"/\" render={props=>(\n            <React.Fragment>\n                <AddTodo addTodo={this.addTodo}/>\n                <Todos todos={this.state.todos} markComplete={this.markComplete} deleteItem={this.deleteItem}/>\n            </React.Fragment>\n            )}/>\n\n            <Route path=\"/about\" component={About}/>\n            \n          </div>\n        </div>\n      </Router>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}